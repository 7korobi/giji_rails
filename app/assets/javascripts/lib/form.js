// Generated by CoffeeScript 1.6.2
var FORM;

FORM = function($scope) {
  var length, submit, valid;

  $scope.stories_is_small = true;
  length = function(text, unit) {
    var ascii, other;

    if (text == null) {
      return 0;
    }
    switch (unit) {
      case 'point':
        0;
        break;
      case 'count':
        0;
        break;
      case 'none':
        0;
    }
    ascii = text.match(/[\x01-\xff]/g) || [];
    other = text.match(/[^\x01-\xff]/g) || [];
    return ascii.length + other.length * 2;
  };
  valid = function(f, cb) {
    var lines, mark, size;

    f.valid = true;
    if (f.max) {
      size = length(f.text, f.max.unit);
      lines = f.text.lines().length;
      cb(size);
      if (f.max.size < size) {
        f.valid = false;
      }
      if (f.max.line < lines) {
        f.valid = false;
      }
      if (f.valid) {
        f.error = "";
        mark = "";
      } else {
        f.error = "cautiontext";
        mark = "⊘";
      }
      return "" + mark + " " + size + "<sub>/" + f.max.size + "字</sub>  " + lines + "<sub>/" + f.max.line + "行</sub>";
    } else {
      return "";
    }
  };
  submit = function(f, param) {
    return $scope.submit(param, function() {
      if (f) {
        if ($scope.errors != null) {
          $scope.errors[f.cmd] = [];
        }
        f.is_delete = true;
        switch (f.cmd) {
          case "wrmemo":
            return f.is_preview = false;
          case "write":
            f.is_preview = false;
            return f.text = "";
          case "action":
            f.text = "";
            f.target = "-1";
            return f.action = "-99";
        }
      }
    });
  };
  $scope.error = function(f) {
    var list;

    if ((f != null) && ($scope.errors != null)) {
      list = $scope.errors[f.cmd];
    }
    list || (list = []);
    return list.join("<br>");
  };
  $scope.text_valid = function(f) {
    return valid(f, function(size) {
      if (size < 4) {
        return f.valid = false;
      }
    });
  };
  $scope.action_valid = function(f) {
    return valid(f, function(size) {
      if (size < 1) {
        if (f.target === "-1") {
          f.valid = false;
        }
        if (f.action === "-99") {
          return f.valid = false;
        }
      }
    });
  };
  $scope.preview_action = function(f) {
    var target, text, _ref;

    text = 0 < ((_ref = f.text) != null ? _ref.length : void 0) ? f.text : $scope.option(f.actions, f.action).name.replace(/\(.*\)$/, "");
    target = -1 < f.target ? $scope.option(f.targets, f.target).name : "";
    return "" + f.shortname + "は、" + target + text;
  };
  $scope.preview = function(f) {
    var lines;

    if (f.text != null) {
      lines = f.text.escapeHTML().lines();
      return lines.join("<br>");
    } else {
      return "";
    }
  };
  $scope.option = function(list, key) {
    var find;

    find = list.find(function(o) {
      return o.val === key;
    });
    if (find != null) {
      return find;
    } else {
      return {};
    }
  };
  $scope.entry = function(f, valid) {
    var param;

    if (f.disabled) {
      return;
    }
    if (valid && f.is_preview) {
      param = {
        cmd: 'entry',
        turn: $scope.event.turn,
        vid: $scope.story.vid,
        csid_cid: f.csid_cid,
        role: f.role,
        mes: f.text,
        entrypwd: f.password,
        target: -1,
        monospace: 0
      };
      if (SOW.monospace[f.style]) {
        param.monospace = SOW.monospace[f.style];
      }
      return submit(f, param);
    } else {
      if (f.ver != null) {
        f.ver.commit();
      }
      return f.is_preview = valid;
    }
  };
  $scope.write = function(f, valid) {
    var param;

    if (f.disabled) {
      return;
    }
    if (f.ver != null) {
      f.ver.commit();
    }
    if (valid && f.is_preview) {
      param = {
        cmd: f.cmd,
        safety: "on",
        turn: $scope.event.turn,
        vid: $scope.story.vid,
        target: f.target,
        mes: f.text,
        monospace: 0
      };
      if (SOW.monospace[f.style]) {
        param.monospace = SOW.monospace[f.style];
      }
      if (f["switch"]) {
        param[f["switch"]] = "on";
      }
      return submit(f, param);
    } else {
      return f.is_preview = valid;
    }
  };
  $scope.action = function(f, valid) {
    var param;

    if (f.disabled) {
      return;
    }
    if (valid) {
      param = {
        cmd: "action",
        turn: $scope.event.turn,
        vid: $scope.story.vid,
        target: f.target,
        actionno: f.action,
        actiontext: f.text,
        monospace: 0
      };
      return submit(f, param);
    }
  };
  $scope.vote_change = function(f) {
    if ($scope.errors != null) {
      return $scope.errors[f.cmd] = ["" + f.title + "をクリックしましょう。"];
    }
  };
  $scope.vote = function(f) {
    var param;

    if (f.disabled) {
      return;
    }
    param = {
      cmd: f.cmd,
      vid: $scope.story.vid,
      target: f.target1,
      target2: f.target2
    };
    switch (f.cmd) {
      case 'vote':
        param.entrust = '';
        break;
      case 'entrust':
        param.entrust = 'on';
    }
    return submit(f, param);
  };
  $scope.commit = function(f) {
    var param;

    if (f.disabled) {
      return;
    }
    param = {
      cmd: f.cmd,
      vid: $scope.story.vid,
      commit: f.commit
    };
    return submit(f, param);
  };
  return $scope.confirm = function(f) {
    var param, target_name;

    if (f.disabled) {
      return;
    }
    if (f.targets) {
      target_name = $scope.option(f.targets, f.target).name;
    }
    if (target_name) {
      $scope.form.confirm = "" + target_name + " - " + f.title;
    } else {
      if (f.targets != null) {
        return;
      }
      $scope.form.confirm = f.title;
    }
    param = {
      cmd: f.cmd,
      vid: $scope.story.vid,
      target: f.target,
      target2: f.target2
    };
    $scope.confirm_cancel = function() {
      return $scope.form.confirm = null;
    };
    return $scope.confirm_complete = function() {
      var _i, _len, _ref, _results;

      $scope.form.confirm = null;
      submit(f, param);
      _ref = $scope.form.texts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        _results.push(f.is_delete = true);
      }
      return _results;
    };
  };
};
